#!/usr/bin/perl
#
# Copyright 2012,2013,2014 Per Carlson
#
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl 5.14. For more details,
# see the full text of the licenses in the directory LICENSES.
#

use warnings;
use strict;
use feature 'switch';

no if $] >= 5.017011, warnings => 'experimental::smartmatch';

use FindBin;
use lib "$FindBin::Bin/../lib/";
use lib "$FindBin::Bin/../lib/perl5";
use Getopt::Long '2.32';    # enables auto_version
use Pod::Usage;
use POSIX qw{ strftime };
use Text::Table;
use IO::Prompt;
use Algorithm::Diff;

use Netaudit::Db;
use Netaudit::Constants;
use Netaudit::Config;

# set version for getopt auto_version
our $VERSION = $Netaudit::Constants::VERSION;

# AoH of tables and their options
# Note: When adding an table, Hostname MUST always be first column
#
# TODO: this should come from the database
#
my @tables = ({
    table   => 'route_summary',
    descr   => 'Global routing summary',
    columns => 'Hostname,AFI,Connected,Static,Local,ISIS,BGP',
    order   => 'hostname,afi',
  },

  {
    table   => 'isis_neighbour',
    descr   => 'IS-IS neighbours',
    columns => 'Hostname,Neighbour,Interface,State',
    order   => 'hostname,interface',
  },

  {
    table   => 'isis_topology',
    descr   => 'IS-IS topology',
    columns => 'Hostname,Host,AFI,Interface,Metric',
    order   => 'hostname,host,afi',
  },

  {
    table   => 'bgp',
    descr   => 'BGP peerings',
    columns => 'Hostname,Peer,AFI,VRF,ASN,Prefixes',
    order   => 'hostname,peer,afi,vrf',
  },

  {
    table   => 'interface',
    descr   => "Interfaces with status and properties",
    columns => 'Hostname,Descr,AdminStatus,OperStatus,IPv6Status,MTU,Speed',
    order   => 'hostname,descr',
  },

  {
    table   => 'vrf',
    descr   => "VRF's and interfaces",
    columns => 'Hostname,VRF,Active,Associated',
    order   => 'hostname,vrf',
  },

  {
    table   => 'pwe3',
    descr   => 'PWE3 circuits',
    columns => 'Hostname,Peer,Interface,Status',
    order   => 'hostname,peer',
  });

# options
my %opts = (
  colors => -t STDIN && -t STDOUT,    # no colors if not interactive
  configfile => '',                   # make sure it exists
);

Getopt::Long::Configure("auto_version");
#<<<
GetOptions(
  \%opts,
  'colors|C!',        # use colors in output
  'configfile|c=s',
  'diff|d:s',         # differential reporting from two runs
  'full:0',           # full reporting of one run
  'help|?',
  'hosts!',           # lists which runs each host is in
  'isis:0',           # check if isis v4 and v6 have same topology
  'list:99999',       # list runs
  'man',
  'purge=s',          # purge runs
  'runs!',            # lists which hosts in each run
) or pod2usage(2);
#<<<
pod2usage(1) if $opts{help};
pod2usage(-exitval => 2, -verbose => 2) if $opts{man};

my $cfg = eval { Netaudit::Config->new(filename => $opts{configfile}) };
die $@ if $@;

my $db = eval { Netaudit::Db->new(database => $cfg->database) };
die $@ if $@;

# try to load our recommended modules
# and check if the minimum version requirement
# are met
eval {
  require Term::ANSIColor;
  Term::ANSIColor->import();
  die unless $Term::ANSIColor::VERSION ge '2.01';
} or $opts{colors} = 0;

eval {
  require Text::Aligner;
  Text::Aligner->import();
  die unless $Text::Aligner::VERSION ge '0.06';
} or $opts{colors} = 0;

# Check which mode we are in
if (exists $opts{list}) {
  listruns($opts{list});
}

elsif (exists $opts{hosts}) {
  hostruns();
}

elsif (exists $opts{runs}) {
  runhosts();
}

elsif (exists $opts{purge}) {
  purgeruns(split(/-/, $opts{purge}));
}

elsif (exists $opts{isis}) {
  isisreport($opts{isis});
}

elsif (exists $opts{full}) {
  fullreport($opts{full}, shift @ARGV);
}

elsif (exists $opts{diff}) {
  diffreport($opts{diff}, shift @ARGV);
}

# if we end up here no operational mode is selected
else {
  # running a diff over the last runs is the default
  diffreport('', shift @ARGV);
}

exit;

#---

sub hostruns {
  # get the list of hostnames
  my $stmt = q/
    SELECT DISTINCT hostname 
    FROM route_summary
  /;
  my @hosts = $db->select_column($stmt) or die "No hosts in database.\n";

  $stmt = q/
    SELECT DISTINCT run 
    FROM route_summary 
    WHERE hostname = ?
  /;
  # loop over the hosts picking up the runs
  foreach my $host (@hosts) {
    my @runs = $db->select_column($stmt, $host);
    print "Host: $host\n";
    print "Runs: ", join(", ", @runs), "\n\n";
  }
}

#---

sub runhosts {
  # get the list of runs
  my $stmt = q/
    SELECT run 
    FROM runs
  /;
  my @runs = $db->select_column($stmt) or die "No hosts in database.\n";

  $stmt = q/
    SELECT DISTINCT hostname 
    FROM route_summary 
    WHERE run = ? 
    ORDER BY hostname ASC
  /;
  # loop over the runs picking up the hosts
  foreach my $run (@runs) {
    my (undef, $epoch) = getrun($run);
    printf "Run: %s (%s)\n", $run, strftime("%F %H:%M", localtime($epoch));
    print "Hosts: ", join(", ", gethosts($run)), "\n\n";
  }
}

#---

sub fullreport {
  my ($run_arg, $hostname_arg) = @_;

  my $hostname;
  my $have_hostname_arg = defined $hostname_arg;
  if ($have_hostname_arg) {
    $hostname = $hostname_arg . '%';
  }
  else {
    $hostname = '%';
  }

  my ($run, $epoch) = getrun($run_arg);
  unless ($run) {
    if ($run_arg == 0) {
      die "There are no runs in the database\n";
    }
    else {
      die "Run '$run_arg' do not exist. Use --list to view available runs.\n";
    }
  }

  # which hosts did we collect data from in the run
  my @hosts = gethosts($run);

  # do @hosts contain our host?
  if ($have_hostname_arg) {
    die "'$hostname_arg' doesn't exist in run $run\n"
      if (scalar grep {m{ ^ $hostname_arg }xms} @hosts) == 0;
  }

  printf "Full report of the audit run at: %s\n\n",
    strftime("%F %H:%M", localtime($epoch));

  foreach my $href (@tables) {
    my @colspec = (\'| ', map { ($_, \' | ') } split(/,/, $href->{columns}));
    # replace the last col attribute with one without a trailing space
    $colspec[-1] = \' |';
    my $table = Text::Table->new(@colspec);

    my $lc_columns = lc $href->{columns};
    my $stmt       = qq/
      SELECT $lc_columns
      FROM $href->{table} 
      WHERE 
        run = ? 
      AND 
        hostname LIKE ? 
      ORDER BY $href->{order}
    /;

    my $aref = $db->select_aref($stmt, $run, $hostname);

    foreach my $rref (@{$aref}) {
      $table->add(@{$rref});
    }
    print "$href->{descr}:\n";
    print "=" x length("$href->{descr}:"), "\n";
    print $table->title();
    print $table->rule('-', '+');
    print $table->body();
    print "\n";
  }

  return;
}

#---

sub diffreport {
  my ($compare, $hostname_arg) = @_;
  my ($from, $from_epoch, $to, $to_epoch, @hosts, $hostname);

  # grab the unmodified hostname
  my $have_hostname_arg = defined $hostname_arg;
  if ($have_hostname_arg) {
    $hostname = $hostname_arg . '%';
  }
  else {
    $hostname = '%';
  }

  if ($compare eq '' || $compare eq "0") {
    # get the two last runs
    ($to, $to_epoch, $from, $from_epoch) = getrun(-1, 2, $hostname);
    die "Can't find two runs for '$hostname_arg'\n" unless ($to && $from);
  }
  else {
    my ($f, $t) = ($compare =~ m{ ^ (\d+) (?: [-,] (\d+))* $ }xms);
    die "Illegal compare argument: $compare\n" unless defined($f);

    # get from run
    ($from, $from_epoch) = getrun($f);

    # if $to is defied, use it. an empty to mean the "last run"
    ($to, $to_epoch) = defined $t ? getrun($t) : getrun(0);

    die "Run $f does not exist\n" unless $from;
    die "Run $t does not exist\n" unless $to;
  }

  # which hosts did we collect data from in the runs
  my @from_hosts = gethosts($from);
  my @to_hosts   = gethosts($to);

  # if a hostname is given, check that the host
  # is unique in both @from_hosts and @to_hosts
  # also out that hostname in the list of @hosts
  # we are looking for
  if ($have_hostname_arg) {
    @hosts = grep {m{ ^ $hostname_arg }xms} @from_hosts;
    die "'$hostname_arg' isn't unique in run $from\n" if @hosts > 1;

    @hosts = grep {m{ ^ $hostname_arg }xms} @to_hosts;
    die "'$hostname_arg' isn't unique in run $to\n" if @hosts > 1;
  }

  # if no host is given, run the diff over the hosts which
  # are in both runs
  else {
    # calculate the intersection and symmetric difference
    # of the hosts, i.e. the hosts present in both runs, and
    # those in only one run
    # code from receipe 4.8 in perl cookbook
    my @isect_hosts = ();
    my @diff_hosts  = ();
    my %count;
    foreach my $e (@from_hosts, @to_hosts) { $count{$e}++ }
    foreach my $e (keys %count) {
      push @{$count{$e} == 2 ? \@isect_hosts : \@diff_hosts}, $e;
    }

    if (@diff_hosts) {
      print "The hosts in the runs do not overlap completly. Only comparing\n";
      print "hosts audited in both runs. Those are:\n";
      map { print " - $_\n"; } @isect_hosts;
      print "\n";
    }

    # store the isect_hosts in the list of hosts to look for
    @hosts = @isect_hosts;
  }

  print "Comparing the results from the audit runs\n";
  printf " %2d: %s\n", $from, strftime("%F %H:%M", localtime($from_epoch));
  printf " %2d: %s\n", $to,   strftime("%F %H:%M", localtime($to_epoch));
  print "\n";

  foreach my $href (@tables) {
    # i must say i'm pleased with this line :-)
    my @colspec = (\'| ', map { ($_, \' | ') } split(/,/, $href->{columns}));
    # replace the last col attribute with one without a trailing space
    $colspec[-1] = \' |';

    my $table = Text::Table->new(@colspec);

    my $lc_columns = lc $href->{columns};
    my $stmt       = qq/
      SELECT $lc_columns
      FROM $href->{table}
      WHERE 
        run = ? 
      AND 
        hostname LIKE ? 
      ORDER BY $href->{order}
    /;

    # get data from the runs
    my $old = $db->select_aref($stmt, $from, $hostname)
      or die "Couldn't get data from the run $from\n";
    my $new = $db->select_aref($stmt, $to, $hostname)
      or die "Couldn't get data from the run $to\n";

    # only keep those rows in old and new where the hostname is in
    # the hosts list
    my $helper = sub {
      return scalar grep {/^$_[0]$/} @hosts;
    };
    @{$old} = grep { &$helper($$_[0]) } @{$old};
    @{$new} = grep { &$helper($$_[0]) } @{$new};

    # when running the diff, we can't compare the rows with data directly.
    # instead, create a stringified representation of each row, and
    # compare that one.
    #
    # fullkey is a string covering all columns, and is used as the key when
    # running diff over the old and new arrays.
    #
    # shortkey is a string covering the columns needed to identify one data
    # point. if two such strings are identical, the rest of the columns
    # are variable data that should be compared.
    #
    my $shortkeycolumns = $href->{order} =~ tr/,//;
    foreach my $aref (@{$old}, @{$new}) {
      my $fullkey = join(";", map { $_ || "" } @{$aref});
      my $shortkey
        = join(";", map { $_ || "" } @{$aref}[ 0 .. $shortkeycolumns ]);
      push(@{$aref}, $shortkey, $fullkey);
    }

    # run a diff of the two AoA's using the fullkey (last element in each array)
    # as the key
    my $diff = Algorithm::Diff::diff($old, $new, sub { $_[0][-1] });

    # flatten the diffs into a list of changes. we are not interested
    # in how to transform old -> new, only the changes.
    my %HoA;
    foreach my $hunk (@{$diff}) {
      foreach my $element (@{$hunk}) {
        my $op   = @{$element}[0];
        my $item = @{$element}[2];
        # copy "shortkey" to key and drop "fullkey"
        my ($key, undef) = splice(@{$item}, -2);
        push(@{$HoA{$key}}, [ $op, $item ]);
      }
    }

    foreach my $k (sort keys %HoA) {
      # if there is only one element, add it to table
      if (scalar @{$HoA{$k}} == 1) {
        my ($op, $element) = splice @{${$HoA{$k}}[0]}, -2;
        if ($op eq '+') {
          $table->add(map { formatitem($_ || "") } @{$element});
        }
        else {
          $table->add(map { formatitem($_ ? "[$_]" : "") } @{$element});
        }
      }
      else {
        my ($oldop, $oldel) = splice @{${$HoA{$k}}[0]}, -2;
        my ($newop, $newel) = splice @{${$HoA{$k}}[1]}, -2;

        # op1/element1 must be the 'old' pair (ie. not added/+'ed)
        if ($oldop eq '+') {
          my $tmp;
          $tmp   = $oldop;
          $oldop = $newop;
          $newop = $tmp;
          $tmp   = $oldel;
          $oldel = $newel;
          $newel = $tmp;
        }

        my @a;
        # loop over the new elements and store the diff with old
        foreach my $i (0 .. scalar @{$newel}) {
          my $e1 = $$oldel[$i] || "";
          my $e2 = $$newel[$i] || "";

          # if no change, just store the element
          if ($e1 eq $e2) {
            push(@a, formatitem($e2));
          }
          # something changed
          else {
            push(@a, formattuple($e1, $e2));
          }
        }
        $table->add(@a);
      }
    }

    print "$href->{descr}\n";
    print "=" x length($href->{descr}) . "\n";

    if ($table->body_height > 0) {
      print $table->title;
      print $table->rule('-', '+');
      print $table->body;
    }
    else {
      print "No changes\n";
    }
    print "\n";
  }
  return;
}

#---

sub purgeruns {
  my ($start, $stop) = @_;

  # if any of the ranges are undef, use same value as other end
  # (one run is selected)
  $start = $stop  unless defined $start;
  $stop  = $start unless defined $stop;

  return unless prompt("Purging runs from $start to $stop? [y/n] ", '-1y');

  my $rows
    = $db->dostmt("DELETE FROM runs WHERE run BETWEEN ? AND ?", $start, $stop);
  printf "Deleted %d runs from database\n", $rows;

  return;
}

#---

sub listruns {
  my ($count) = @_;

  my @runs = getrun(-1, $count) or die "Didn't find any matching runs\n";

  printf "%3s | %s\n", "run", "datetime";
  while (my ($r, $e) = splice(@runs, 0, 2)) {
    printf "%3d | %s\n", $r, strftime("%F %H:%M", localtime($e));
  }
  return;
}

#---

sub isisreport {
  my ($run) = @_;

  my $epoch;
  ($run, $epoch) = getrun($run)
    or die "Run $run do not exist. Use --list to view available runs.\n";

  printf "ISIS topology audit of the run at: %s\n\n",
    strftime("%F %H:%M", localtime($epoch));

  my $v4stmt = q/ 
    SELECT hostname, host, interface, metric 
    FROM isis_topology 
    WHERE 
      afi = 'ipv4'
    AND 
      run = ? 
  /;

  my $v4 = eval { $db->select_aref($v4stmt, $run) };
  die "SQL statement failed: $@\n" if $@;
  die "No data found\n" unless $v4;

  my $v6stmt = q/
    SELECT metric
    FROM isis_topology
    WHERE 
      afi = 'ipv6'
    AND 
      hostname = ?
    AND 
      host = ?
    AND 
      interface = ? 
    AND 
      run = ?
  /;

  my @colspec = (
    \'| ', map { ($_, \' | ') } qw{ Hostname Host Interface IPv4 },
    "IPv6", \' |'
  );
  my $table = Text::Table->new(@colspec);

  foreach my $row (@{$v4}) {
    my ($hostname, $host, $interface, $v4metric) = @{$row};
    my ($v6metric)
      = eval { $db->select_row($v6stmt, $hostname, $host, $interface, $run); };
    $v6metric ||= "-";

    if ($v4metric ne $v6metric) {
      $table->add($hostname, $host, $interface, $v4metric, $v6metric);
    }
  }

  if ($table->body_height > 0) {
    print $table->title;
    print $table->rule('-', '+');
    print $table->body;
  }
  else {
    print "Gratulations! No inconsistencies in the topologies\n";
  }
  print "\n";

  return;
}

#---

sub getrun {
  my ($run, $count, $hostname) = @_;
  # run ==  0 => get id of last run
  # run == -1 => get id of $count last runs
  # else => check if run exist

  # safe defaults
  $count    //= 999999;
  $hostname //= '%';
  my $quoted_host = $db->quote($hostname);

  my ($stmt, $arg);

  given ($run) {
    when ($_ == 0) {
      $stmt = q/
        SELECT run, epoch 
        FROM runs
        ORDER BY run DESC 
        LIMIT 1
      /;
    }

    when ($_ == -1) {
      $stmt = qq/
        SELECT DISTINCT runs.run, epoch 
        FROM runs 
        JOIN route_summary
        WHERE 
          route_summary.run = runs.run
        AND 
          route_summary.hostname LIKE $quoted_host
        ORDER BY runs.run DESC 
        LIMIT $count
      /;
    }

    default {
      $stmt = qq/
        SELECT run, epoch
        FROM runs 
        WHERE run = $run
      /;
    }
  }

  my $aref = eval { $db->select_aref($stmt) };
  die $@ if $@;

  my @result;
  if ($aref) {
    foreach my $rref (@{$aref}) {
      push(@result, @{$rref});
    }
  }

  return wantarray ? @result : $result[0];
}

#---

sub gethosts {
  my ($run) = @_;

  my $stmt = q/
    SELECT DISTINCT hostname 
    FROM route_summary 
    WHERE run = ?
  /;
  my @hosts = $db->select_column($stmt, $run);

  return @hosts;
}

#---

sub numerical {
  my @vals = @_;

  my $ok = 1;
  foreach (@vals) {
    return 0 if !defined $_;    # an undef is never numerical
    $ok &&= $_ =~ /^ \s* -* \d+ \s* $/xms;
  }
  return $ok;
}

#---

sub formattuple {
  my ($old, $new) = @_;

  # if any of old or new is numerical, calculate the difference
  if (numerical($old) || numerical($new)) {
    # make sure both is numerical
    $old = 0 if !numerical($old);
    $new = 0 if !numerical($new);
    my $diff  = $new - $old;
    my $color = "reset";
    $color = "green" if $diff > 0;
    $color = "red"   if $diff < 0;
    my $str = sprintf "[% +d]", $diff;
    return sprintf "%6d %s", $new, colorize($str, $color);
  }

  # if both old and new are empty, return empty string
  elsif (!$old && !$new) {
    return "";
  }

  # print both strings
  else {
    my ($oldcolor, $newcolor);
    $oldcolor = $newcolor = "reset";
    if ($old =~ /down/i && $new =~ /up/i) {
      $oldcolor = "red";
      $newcolor = "green";
    }
    if ($old =~ /up/i && $new =~ /down/i) {
      $oldcolor = "green";
      $newcolor = "red";
    }
    return sprintf "%s [%s]", colorize($new, $newcolor),
      colorize($old, $oldcolor);
  }
}

#---

sub formatitem {
  my ($item) = @_;

  # any undef? make them defined
  if (!defined $item) {
    $item = numerical($item) ? 0 : "";
  }

  # ok, time to generate string
  if (numerical($item)) {
    return sprintf "%6d", $item;
  }
  else {
    return sprintf "%6s", $item;
  }
}

#---

sub formatlist {
  my @items = @_;
  return map { formatitem($_) } @items;
}

#---

sub colorize {
  my ($str, $color) = @_;

  return $opts{colors} ? colored($str, $color) : $str;
}

__DATA__

=pod

=head1 NAME

netreport -- Prints a report of the data captured by L<netaudit(1)>

=head1 SYNOPSIS

netreport  [--help | --man] [options] [--] [hostname]

 --help   Show brief help text
 --man    Show full man page

=head1 DESCRIPTION

Print a report of the collected data from one or more L<netaudit(1)> runs. 
The default is to run in C<--diff> mode, either over the devices in last two 
runs (if no C<hostname> on command-line), or the last two runs where there
is data for C<hostname>.

=head1 OPTIONS

=head2 General parameters

=over

=item B<-C> | B<--colors>

Enable colorized output.
To disable colors use B<--no-colors>.
This is used when running in diff mode.
Default is ON unless when run in a non-interactively enviroment
(such from cron) where it's OFF.

=item B<-c> F<filename> | B<--configfile>=F<filename>

The location of the configuration file to use.
A config file is searched for in the following order:

=over 2

=item * B<--configfile> argument

=item * F<netaudit.conf>

=item * F<~/.netaudit>

=item * F</usr/local/etc/netaudit.conf>

=item * F</etc/netaudit.conf>

=back

Note that the B<first> found config file is used, there is B<NO>
hierarchy of config files.

The format of the config file is specified in L<netaudit(1)>

=item B<hostname>

Run the report only for I<hostname>.
There is no need to write the I<hostname> as a FQDN, as long as
the part given is unique.
If L<netreport> gets confused by the I<hostname> put a '--' as
an argument before the B<hostname> on the command line.

=back

=head2 Modes of operation

=over

=item B<-d> [NUM[,NUM]] | B<--diff>[=NUM[,NUM]]

Select which runs the report should be be based on.
This is the default mode.
Default (if no NUM) is to show the difference between the
two last runs.

If a I<hostname> is specified on the command line, the B<diff> will be
run over the two last runs where I<hostname> has some collected data.
Otherwise the B<diff> is done for the hosts in both last two runs.

=item B<-f> [NUM] | B<--full>[=NUM]

Show a full report, i.e. all collected data, from a single run.
Default (when no NUM) is to print the report from the last run.

Accepts a I<hostname> as parameter for pruning the report.

=item B<--hosts>

For each host in the database print the runs which there
are stored data in the database.

=item B<-i> [NUM] | B<--isis>[=NUM]

Compare the ISIS topologies for IPv4 and IPv6, and report any
differences in outgoing interfaces and/or metrics.
Default (when no NUM) is to print the report from the last run.

=item B<--list>[=NUM]

Lists the NUM last runs stored in the database. Without a NUM all runs
are printed.

=item B<-p> RANGE | B<--purge>=RANGE

Remove the runs from the database matching RANGE

=item B<--runs>

For each run in the database print the hosts which there
are stored data in the database.

=back

=head1 Numerical arguments to the modes

=head2 NUM

Each NUM is a single number, and may consist of either:

     N    Select the N'th run

     0    Select the last run


=head2 RANGE

Each RANGE is made up of a start and stop run. 
A RANGE is one of:

     N    Select the runs from N'th to last run

   N-M    Select the runs from N'th to M'th (included)

When purging runs the most useful RANGE is I<N-M>. If you would like to remove 
the oldest data you can use I<0> instead of I<N>, i.e the option will be 
I<--purge=0-M>


=head1 AUTHOR

Per Carlson L<< <pelle@hemmop.com> >>

=head1 COPYRIGHT AND LICENSE

Copyright 2012,2013,2014 Per Carlson.

This application is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.14 itself.

=head1 SEE ALSO

L<netaudit(1)>

=cut


