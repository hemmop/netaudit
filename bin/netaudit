#!/usr/bin/perl
#
# Copyright (c) 2012, Per Carlson
#
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl 5.14. For more details,
# see the full text of the licenses in the directory LICENSES.
#

use strict;
use warnings;
use feature 'switch';

use FindBin;
use lib "$FindBin::Bin/../lib/";
use lib "$FindBin::Bin/../lib/perl5";
use Getopt::Long;
use Socket;
use Regexp::Common;
use Config::Simple;
use FileHandle;    # don't know why I need this, but IO:Prompt fails without it
use IO::Prompt;
use Pod::Usage;
use NetAddr::IP;
use File::Spec::Functions;
use File::stat;

use Netaudit::Audit;
use Netaudit::Db;

# config hash
my %config;
GetOptions(
  \%config, 
  'help|?!', 
  'man!', 
  'database|d=s', 
  'community=s',
  'configfile|c=s', 
  'username|u=s'
) or pod2usage(2);
pod2usage(1) if $config{help};
pod2usage(-exitstatus => 0, -verbose => 2) if $config{man};

# set some early defaults
$config{configfile} ||= "./netaudit.conf";

if (-r $config{configfile}) {
  my $cfg = Config::Simple->new($config{configfile})
    or die sprintf "Reading config file %s failed: %s\n",
      $config{configfile}, Config::Simple->error();

  # get parameters from cli first, then config file
  $config{database}  = $config{database}  || $cfg->param('database');
  $config{community} = $config{community} || $cfg->param('community');
  $config{range}     = [$cfg->param('range')];

  # this are undocumented options to make development easier
  $config{schema}      = $cfg->param('schema');
  $config{development} = $cfg->param('development');

  # if username set on cli, do not use password from config file
  if (!$config{username}) {
    $config{username} = $cfg->param('username');

    # if password is set in config file it *must* have file mode x00, ie
    # only be readable by the user
    if ($cfg->param('password')) {
      my $st = stat($config{configfile});
      die "Password set in config file, but file is group/world readable\n"
        if $st->mode & 044;
      $config{password} = $cfg->param('password');
    }
  }
  else {
    # unset password to trigger prompt
    $config{password} = "";
  }
}

# set defaults for everything not already set
$config{username}  ||= "netaudit";
$config{database}  ||= "./netaudit.db";
$config{community} ||= "public";
$config{schema} ||= catfile($FindBin::Bin, '../share/netaudit', 'schema.sql');

unless ($config{password}) {
  # get password from terminal
  $config{password} =
    prompt "Enter the password for user \"$config{username}\": ",
    -echo => '*',
    -tty;
}

# a list of the hosts to loop over
my @hosts;

# if we have got no hosts/ip on the but a range, push the range
# it on to the command argument list
push(@ARGV, split(/,/, join(",", @{$config{range}})))
  if (!@ARGV && exists $config{range});

# loop over each host or range on command line
foreach my $arg (@ARGV) {
  # is this a hostname, or IP-range?
  for ($arg) {
    # IPv4-range
    when (/$RE{net}{IPv4}/) {
      my $na = NetAddr::IP->new($arg)
        or die "Cannot parse IPv4-range $arg\n";

      foreach my $ip (@{$na->hostenumref}) {
        my $aton = inet_aton($ip->addr);
        my $hostname = gethostbyaddr($aton, AF_INET);
        push(@hosts, $hostname) if $hostname;
      }
    }

    # treat it as a host
    default {
      # do a double DNS lookup (hostname -> ip -> hostname)
      my $packed = gethostbyname($arg)
        or die "Cannot resolve hostname \"$arg\"\n";
      my $fqdn = gethostbyaddr($packed, AF_INET)
        or die "Cannot do double lookup of hostname \"$arg\"\n";
      push(@hosts, $fqdn);
    }
  }
}

# we need atleast one host to work with
die "No valid host found in range or hostname\n" unless @hosts;

# open database file
my $db = eval {
  Netaudit::Db->new(
    'database' => $config{database},
    'schema'   => $config{schema});
};
die $@ if $@;
$db->newrun;
$config{db} = $db;

foreach my $host (@hosts) {
  Netaudit::Audit->run($host, \%config);
}

__DATA__

=pod

=head1 NAME

netaudit -- Runs an network audit on one or more devices and stores data in database

=head1 SYNOPSIS

netaudit [options] [device...]

 Options
 --community             SNMP community when polling the devices
 --configfile=filename   Configuration file
 --database=filename     Database to store data in
 --help                  Prints a brief help message
 --man                   Full documentation
 --username              Username to use when contacting the devices   

=head1 DESCRIPTION

B<netaudit> runs a series of commands and SNMP walks on a I<device> to get
a view of the environment it operates within.
The data is stored in a SQLite3 database and can be viewed either with
direct SQL queries, or (recommended) the tool L<netreport(1)> 
included in this distribution.

Supported devices are routers running IOS, IOS XR or JunOS.

=over 8

=item B<-h>, B<-?>, B<--help>

Print a brief help text and exit

=item B<-m>, B<--man>

Print a full man page and exit

=item B<--community>=I<community>

SNMP community when polling data from the devices.
Only RO rights are needed.
Default is "public".

=item B<-c> F<filename>, B<--configfile>=F<filename>

Use F<filename> as a configuration file.
See also L<CONFIGURATION FILE>.

=item B<-d> F<filename>, B<--database>=F<filename>

Store the captured data in the database file F<filename>.

=item B<-u> I<username>, B<--username>=I<username>

The username to use when logging into a device via Telnet

=item B<device>

The I<device> to run the audit on, and is specified either by a hostname or IP-range.
Several I<devices> can be entered separated by space.
An IP-range is entered on the format I<network/prefix>.
If I</prefix> is missing a I</32> is assumed.

=back

=head1 CONFIGURATION FILE

When running B<netaudit> regularly it is convenient to store
common options in a file.

F<netaudit.conf> is a plain text file where all parameters are
configured like:

  parameter = value

There can only be one parameter/value tuple per line.
Lines starting with the character '#' are treated as commnts.

The configuration options that cane be used are:

=over

=item B<community> = I<community>

The SNMPv2c community to use when polling the device MIBs. 
Default is C<public>.

=item B<database> = F<database>

The database file to use when storing the data/results captured in
the last run.
Default is C<./netaudit.db>.

=item B<password> = I<secret>

The password to use when logging in on a device.
If this parameter is set the config file B<CAN NOT> be readable
by group or world, only the user her/him self.
The application won't run if this isn't fulfilled.

=item B<range> = I<< <IP range> [, <IP range>] >>

Expresses an IP-range to be scanned for devices.
Several ranges can be specified, either by separating them by a comma (,),
or by using multiple lines with C<range = ...>.

A range is written on the format C<network/prefix>, for example
10.0.0.0/8 or 192.168.1.0/24.
If the C</prefix> is omitted, a host-address is used (i.e. a C</32> prefix).

For a IP-address to be used, there I<must> be a a mapping from the IP to
a hostname in the reverse zone. 

=item B<username> = I<username>

The username to use when logging in on a device.
Default is C<netaudit>.

=back

=head1 WHAT IS AUDITED

The audit commands and SNMP walks done are (in a vendor neutral language):

=over

=item

The number of entries in the various routing protocol RIBs

=item

The IS-IS topology

=item

The IS-IS neighbours

=item 

The BGP neighbours and the prefixes received from them (both global and in VPN)

=item

The state, speed and MTU of all important interfaces (main interfaces, MPLS interfaces, tunnels, 
MPLS tunnelss, SDH/SONET interfaces, LAG interfaces)

=item

The state of all PEW3 connections

=item

The number of interfaces configured and active on VPNs

=back

All the above elements are audited for both IPv4 and IPv6.

=head1 AUTHOR

Per Carlson L<< <pelle@hemmop.com> >>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2012 Per Carlson.

This application is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.14 itself.

=head1 SEE ALSO

L<netreport(1)>

=cut

