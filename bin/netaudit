#!/usr/bin/env perl
#
# Copyright 2012-2015 Per Carlson
#
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl 5.14. For more details,
# see the full text of the licenses in the directory LICENSES.
#

use strict;
use warnings;
use feature 'switch';

no if $] >= 5.017011, warnings => 'experimental::smartmatch';

use FindBin;
use lib "$FindBin::Bin/../lib/";
use lib "$FindBin::Bin/../lib/perl5";
use Getopt::Long;
use Socket;
use Regexp::Common;
use FileHandle;    # don't know why I need this, but IO:Prompt fails without it
use IO::Prompt;
use Pod::Usage;
use NetAddr::IP;
use File::stat;

use Netaudit::Audit;
use Netaudit::Db;
use Netaudit::Constants;
use Netaudit::Config;

# configuration options
my $opt_config   = '';
my $opt_help     = 0;
my $opt_man      = 0;
my $opt_username = '';

GetOptions(
  'configfile|c=s' => \$opt_config,
  'help|?!'        => \$opt_help,
  'man!'           => \$opt_man,
  'username|u=s'   => \$opt_username,
) or pod2usage(2);
pod2usage(1) if $opt_help;
pod2usage(-exitstatus => 0, -verbose => 2) if $opt_man;

# open the config file, die on failure
my $cfg = eval { Netaudit::Config->new(filename => $opt_config) };
die $@ if $@;

# if username set on cli, don't use password from config file
if (length $opt_username) {
  $cfg->password('');
}
else {
  # if we should us a password from config file,
  # it mustn't be readable by anyone but the current user
  my $st = stat($cfg->filename);
  die
    "Password set in config file (@{[ $cfg->filename ]}), but file is group/world readable\n"
    if (length $cfg->password && $st->mode & 044);
}

unless ($cfg->password) {
  # are we interactive, if not, we have to die
  die "Cannot ask for password when run non-interactively\n"
    unless (-t STDIN && -t STDOUT);

  # get password from terminal
  my $pw = prompt(
    -prompt => "Enter the password for user '" . $cfg->username . "': ",
    -echo   => '*',
    -tty
  );
  $cfg->password($pw);
}

# a list of the hosts to loop over
my @hosts;

# loop over each host or range on command line or range
# from config file
my @range = @ARGV ? @ARGV : @{$cfg->range};
foreach my $arg (@range) {
  # is this a hostname, or IP-range?
  for ($arg) {
    # IPv4-range
    when (/$RE{net}{IPv4}/) {
      my $na = NetAddr::IP->new($arg) or die "Cannot parse IPv4-range $arg\n";

      foreach my $ip (@{$na->hostenumref}) {
        my $aton = inet_aton($ip->addr);
        my $hostname = gethostbyaddr($aton, AF_INET);
        push(@hosts, $hostname) if $hostname;
      }
    }

    # treat it as a host
    default {
      # do a double DNS lookup (hostname -> ip -> hostname)
      my $packed = gethostbyname($arg)
        or die "Cannot resolve hostname \"$arg\"\n";
      my $fqdn = gethostbyaddr($packed, AF_INET)
        or die "Cannot do double lookup of hostname \"$arg\"\n";
      push(@hosts, $fqdn);
    }
  }
}

# we need atleast one host to work with
die "No valid host found in range or hostname\n" unless @hosts;

# open database file
my $dbh = eval { Netaudit::Db->new(database => $cfg->database) };
die "$@\n" if $@;
$dbh->newrun;

my $audit = eval { Netaudit::Audit->new(config => $cfg, database => $dbh,) };
die $@ if $@;

foreach my $host (@hosts) {
  $audit->run($host);
}

__DATA__

=pod

=head1 NAME

netaudit -- Runs an network audit on one or more devices and stores data in database

=head1 SYNOPSIS

netaudit [options] [device...]

 Options
 --configfile=filename   Configuration file
 --help                  Prints a brief help message
 --man                   Full documentation
 --username              Username to use when contacting the devices   

=head1 DESCRIPTION

B<netaudit> runs a series of commands and SNMP walks on a I<device> to get
a view of the environment it operates within.
The data is stored in a SQLite3 database and can be viewed either with
direct SQL queries, or (recommended) the tool L<netreport(1)> 
included in this distribution.

Supported devices are routers running IOS, IOS XR or JunOS.

=over 8

=item B<-c> F<filename>, B<--configfile>=F<filename>

The location of the configuration file to use.
A config file is searched for in the following order:

=over 2

=item * B<--configfile> argument

=item * F<netaudit.conf>

=item * F<~/.netaudit>

=item * F</usr/local/etc/netaudit.conf>

=item * F</etc/netaudit.conf>

=back

Note that the B<first> found config file is used, there is B<NO>
hierarchy of config files.

The format of the config file is specified in L<CONFIGURATION FILE>

=item B<-h>, B<-?>, B<--help>

Print a brief help text and exit

=item B<-m>, B<--man>

Print a full man page and exit

=item B<-u> I<username>, B<--username>=I<username>

The username to use when logging into a device via Telnet

=item B<device>

The I<device> to run the audit on, and is specified either by a hostname or IP-range.
Several I<devices> can be entered separated by space.
An IP-range is entered on the format I<network/prefix>.
If I</prefix> is missing a I</32> is assumed.

=back

=head1 CONFIGURATION FILE

The configuration file is a plain text file where all 
parameters are configured like:

  parameter = value

There can only be one parameter/value tuple per line.
Lines starting with the character '#' are treated as comments.

=head2 PARAMETERS

=over 8

=item B<community> = I<community>

The SNMPv2c community to use when polling the device MIBs.

This is a deprecated configuration parameter, use L</communities> instead.

=item B<communities> = I<community>, [ I<community> ]

The SNMPv2c communities to try when polling the device MIBs.
Default is C<public>.

=item B<database> = F<database>

The database file to use when storing the data/results captured in
the last run.
The path is relative to the current directory where the script is run from.
Default is C<netaudit.db>.

=item B<log_level> = I<< fatal | error | warn | info | debug >>

The level of logging done.
Default is I<error>.

=item B<log_file> = F<logfile>

The file to log to.
Default is F</dev/null>, i.e no logging.

=item B<password> = I<secret>

The password to use when logging in on a device.
If this parameter is set the config file B<CAN NOT> be readable
by group or world, only the user her/him self.
The applications won't run if this isn't fulfilled.

=item B<range> = I<< <IP range> [, <IP range>] >>

Expresses an IP-range to be scanned for devices.
Several ranges can be specified, either by separating them by a comma (,),
or by using multiple lines with C<range = ...>.

A range is written on the format C<network/prefix>, for example
10.0.0.0/8 or 192.168.1.0/24.
If the C</prefix> is omitted, a host-address is used (i.e. a C</32> prefix).

For a IP-address to be used, there I<must> be a a mapping from the IP to
a hostname in the reverse zone. 

=item B<timeout> = I<telnet timeout>

The timeout in seconds when querying a device using telnet, i.e how long time
does a command maximum take to run.
Default is 30.

=item B<username> = I<username>

The username to use when logging in on a device.
Default is C<netaudit>.

=back

=head1 WHAT IS AUDITED

The audit commands and SNMP walks done are (in a vendor neutral language):

=over

=item

The number of entries in the various routing protocol RIBs

=item

The IS-IS topology

=item

The IS-IS neighbours

=item 

The BGP neighbours and the prefixes received from them (both global and in VPN)

=item

The state, speed and MTU of all important interfaces (main interfaces, MPLS interfaces, tunnels, 
MPLS tunnelss, SDH/SONET interfaces, LAG interfaces)

=item

The state of all PEW3 connections

=item

The number of interfaces configured and active on VPNs

=back

All the above elements are audited for both IPv4 and IPv6.

=head1 AUTHOR

Per Carlson L<< <pelle@hemmop.com> >>

=head1 COPYRIGHT AND LICENSE

Copyright 2012,2013,2014 Per Carlson.

This application is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.14 itself.

=head1 SEE ALSO

L<netreport(1)>

=cut

